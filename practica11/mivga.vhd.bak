library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mivga is
port( clk50Mhz: in std_logic;
		red: out std_logic_vector(3 downto 0);
		green: out std_logic_vector(3 downto 0);
		blue: out std_logic_vector(3 downto 0);
		h_sync: out std_logic;
		v_sync: out std_logic;
		dipsw: in std_logic_vector(3 downto 0);
		a,b,c,d,e,f,g: out std_logic);
end entity mivga;

architecture behavioral of mivga is
constant cero:   std_logic_vector(6 downto 0):= "0111111";
constant uno:    std_logic_vector(6 downto 0):= "0000110";
constant dos:    std_logic_vector(6 downto 0):= "1011011";
constant tres:   std_logic_vector(6 downto 0):= "1001111";
constant cuatro: std_logic_vector(6 downto 0):= "1100110";
constant cinco:  std_logic_vector(6 downto 0):= "1101101";
constant seis:   std_logic_vector(6 downto 0):= "1111101";
constant siete:  std_logic_vector(6 downto 0):= "0000111";
constant ocho:   std_logic_vector(6 downto 0):= "1111111";
constant nueve:  std_logic_vector(6 downto 0):= "1110011";
constant r1:   std_logic_vector(3 downto 0):= (OTHERS => '1');
constant r0:   std_logic_vector(3 downto 0):= (OTHERS => '0');
constant g1:   std_logic_vector(3 downto 0):= (OTHERS => '1');		
constant g0:   std_logic_vector(3 downto 0):= (OTHERS => '0');
constant b1:   std_logic_vector(3 downto 0):= (OTHERS => '1');
constant b0:   std_logic_vector(3 downto 0):= (OTHERS => '0');
--variable a,b,c,d,e,f: std_ logic;
signal conectornum: std_logic_vector(6 downto 0);


with dipsw select conectornum <=
	"0111111" when "0000",
	"0000110" when "0001",
	"1011011" when "0010",
	"1001111" when "0011",
	"1100110" when "0100",
	"1101101" when "0101",
	"1111101" when "0110",
	"0000111" when "0111",
	"1111111" when "1000",
	"1110011" when "1001",
	"0000000" when others;
	
	
when uno=>
	if((row>210 and row <240) and
	(column>140 and column<150)) then 
		red <= (others => '0');
		green <= (others => '1');
		blue <= (others => '0');
	elsif((row>250 and row <280) and
	(column>140 and column<150)) then 
		red <= (others => '1');
		green <= (others => '0');
		blue <= (others => '0');
	else 
		red <= (others => '0');
		green <= (others => '0');
		blue <= (others => '0');
	end if;
		
when dos=>
	if((row>200 and row <210) and
	(column>110 and column<140)) then 
		red <= (others => '0');
		green <= (others => '0');
		blue <= (others => '1');
	elsif((row>210 and row <240) and
	(column>140 and column<150)) then 
		red <= (others => '0');
		green <= (others => '1');
		blue <= (others => '0');
	elsif((row>280 and row <290) and
	(column>110 and column<140)) then 
		red <= (others => '1');
		green <= (others => '1');
		blue <= (others => '1');
	elsif((row>250 and row <280) and
	(column>100 and column<110)) then 
		red <= (others => '0');
		green <= (others => '1');
		blue <= (others => '1');
	elsif((row>240 and row <250) and
	(column>110 and column<140)) then 
		red <= (others => '1');
		green <= (others => '0');
		blue <= (others => '1');	
	else 
		red <= (others => '0');
		green <= (others => '0');
		blue <= (others => '0');
	end if;
	
when nueve=>
	if((row>200 and row <210) and
	(column>110 and column<140)) then 
		red <= (others => '0');
		green <= (others => '0');
		blue <= (others => '1');
	elsif((row>210 and row <240) and
	(column>140 and column<150)) then 
		red <= (others => '0');
		green <= (others => '1');
		blue <= (others => '0');
	elsif((row>250 and row <280) and
	(column>140 and column<150)) then 
		red <= (others => '1');
		green <= (others => '0');
		blue <= (others => '0');
	elsif((row>210 and row <240) and
	(column>100 and column<110)) then 
		red <= (others => '1');
		green <= (others => '1');
		blue <= (others => '0');
	elsif((row>240 and row <250) and
	(column>110 and column<140)) then 
		red <= (others => '1');
		green <= (others => '0');
		blue <= (others => '1');	
	else 
		red <= (others => '0');
		green <= (others => '0');
		blue <= (others => '0');
	end if;

end architecture;