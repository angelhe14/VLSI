library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;	

entity compP11 is
	generic( constant h_pulse: integer := 96;
				constant h_bp: integer := 48;
				constant h_pixels: integer := 640;
				constant h_fp: integer := 16;
				constant v_pulse: integer := 2;
				constant v_bp: integer := 33;
				constant v_pixels: integer := 480;
				constant v_fp: integer := 10;
				constant cero: std_logic_vector(6 downto 0):="0111111"; --gfedcba
				constant uno:  std_logic_vector(6 downto 0):="0000110";
				constant dos:    std_logic_vector(6 downto 0):="1011011"; 
				constant tres:   std_logic_vector(6 downto 0):="1001111"; 
				constant cuatro: std_logic_vector(6 downto 0):="1100110"; 
				constant cinco:  std_logic_vector(6 downto 0):="1101101"; 
				constant seis:   std_logic_vector(6 downto 0):="1111101"; 
				constant siete:  std_logic_vector(6 downto 0):="0000111"; 
				constant ocho:   std_logic_vector(6 downto 0):="1111111"; 
				constant nueve:  std_logic_vector(6 downto 0):="1110011"; 
				constant diez: std_logic_vector(6 downto 0):="0110101";
				constant once: std_logic_vector(6 downto 0):= "0100101";
				constant doce: std_logic_vector(6 downto 0):="0000101";
				constant trece: std_logic_vector(6 downto 0):="0001101";
				constant catorce: std_logic_vector(6 downto 0):="0111101";
				constant quince: std_logic_vector(6 downto 0):="0010001";
				constant dieciseis: std_logic_vector(6 downto 0):="0010101";
				constant diecisiete: std_logic_vector(6 downto 0):="0101001";
				constant dieciocho: std_logic_vector(6 downto 0):="0110100";
				constant diecinueve: std_logic_vector(6 downto 0):="0111100";
				constant veinte: std_logic_vector(6 downto 0):="0111110";
				constant r1:std_logic_vector(3 downto 0):=(OTHERS => '1');
				constant r0:std_logic_vector(3 downto 0):=(OTHERS => '0');
				constant g1:std_logic_vector(3 downto 0):=(OTHERS => '1');
				constant g0:std_logic_vector(3 downto 0):=(OTHERS => '0');
				constant b1:std_logic_vector(3 downto 0):=(OTHERS => '1');
				constant b0:std_logic_vector(3 downto 0):=(OTHERS => '0')
	);

	port( clk50MHz: in std_logic;
			clk: in std_logic;
			red: out std_logic_vector(3 downto 0);
			green: out std_logic_vector(3 downto 0);
			blue: out std_logic_vector(3 downto 0);
			h_sync: out std_logic;
			v_sync: out std_logic;
			dip: in std_logic;
			a,b,c,d,e,f,g: out std_logic
	);
end entity compP11;

architecture behavioral of P11 is 
constant h_period: integer := h_pulse + h_bp + h_pixels + h_fp;
constant v_period: integer := v_pulse + v_bp + v_pixels + v_fp;
signal h_count: integer range 0 to h_period - 1 := 0;
signal v_count: integer range 0 to v_period - 1 := 0;
signal reloj_pixel: std_logic;
signal reloj_cont: std_logic;
signal column: integer range 0 to h_period - 1 := 0;
signal row: integer range 0 to v_period - 1 := 0;
signal display_ena: std_logic;
signal conectornum: std_logic_vector(6 downto 0);
signal contador: integer range 0 to 20 := 0;
signal div_clk: std_logic;

component divisor is
	port (
		clk: in std_logic;
		div_clk: out std_logic
	);
end component;


begin

	u1: divisor port map (clk, div_clk);
	
	relojpixel: process(clk50MHz) is
	begin
		if rising_edge(clk50MHz) then 
			reloj_pixel <= not reloj_pixel;
		end if;
	end process relojpixel;

	
	contadores2: process(dip,div_clk)
	begin
		--if (dip = '1') then
		if rising_edge(div_clk) then
			if(contador < 20) then
				contador <= contador + 1;
			else 
				contador <= 0;
			end if;
		end if;
	end process contadores2;

	contadores: process(reloj_pixel)
	begin
		if rising_edge(reloj_pixel) then
			if h_count <(h_period-1) then
				h_count <= h_count + 1;
			else
				h_count <= 0;
				if v_count < (v_period - 1) then
					v_count <= v_count + 1;
				else
					v_count<= 0;
				end if;
			end if;
		end if;
	end process contadores;

	serial_hsync: process(reloj_pixel)
	begin
		if rising_edge(reloj_pixel) then 
			if h_count > (h_pixels + h_fp) or h_count > (h_pixels + h_fp + h_pulse) then
				h_sync <= '0';
			else
				h_sync <= '1';
			end if;
		end if;
	end process serial_hsync;
	
	serial_vsync: process(reloj_pixel)
	begin
		if rising_edge(reloj_pixel) then 
			if v_count > (v_pixels + v_fp) or v_count > (v_pixels + v_fp + v_pulse) then
				v_sync <= '0';
			else
				v_sync <= '1';
			end if;
		end if;
	end process serial_vsync;

	coords_pixel: process(reloj_pixel)
	begin
		if rising_edge(reloj_pixel) then
			if(h_count < h_pixels) then
				column <= h_count;
			end if;
			if(v_count < v_pixels) then
				row <= v_count;
			end if;
		end if;
	end process coords_pixel;	
	
	generador_imagen: process(display_ena, row, column)
	begin
		case conectornum is
		when cero=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red  <=(OTHERS => '0');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red  <=(OTHERS => '0');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red  <=(OTHERS => '1');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				red  <=(OTHERS => '1');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>100 and column<110)) THEN --e cian
				red  <=(OTHERS => '0');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red  <=(OTHERS => '1');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '0');
			else												--fondo
				red  <=(OTHERS => '0');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '0');
			end if;	
		when uno=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	   when dos=>
		   if ((row > 200 and row <210) and (column>110 and column<140)) THEN--a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				Red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>100 and column<110)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN--g violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			else												 -- fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
		when tres=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
		when cuatro=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
		when cinco=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
		when seis=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>100 and column<110)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
		when siete=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
		when ocho=> 
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>100 and column<110)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
		when nueve=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
	when diez=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');			
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red  <=(OTHERS => '0');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red  <=(OTHERS => '0');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red  <=(OTHERS => '1');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				red  <=(OTHERS => '1');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>200 and column<210)) THEN --e cian
				red  <=(OTHERS => '0');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red  <=(OTHERS => '1');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '0');										
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;	
	when once=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
				
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when doce=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN--a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				Red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>200 and column<210)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN--g violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;						
	when trece=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when catorce=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when quince=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');	
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when dieciseis=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>200 and column<210)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');	
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when diecisiete=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');	
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when dieciocho=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>200 and column<210)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');	
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when diecinueve=>
			if ((row > 210 and row <240) and (column>140 and column<150)) THEN --b verde
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<= (OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN 		--c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>210 and column<240)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');	
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;			
	when veinte=>
			if ((row > 200 and row <210) and (column>110 and column<140)) THEN--a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				Red<= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>110 and column<140)) THEN --d  blanco
				Red<= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>100 and column<110)) THEN --e cian
				Red<= (OTHERS => '0');
				Green<=(OTHERS => '1');
				Blue<=(OTHERS => '1');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN--g violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 200 and row <210) and (column>210 and column<240)) THEN --a  azul
				red  <=(OTHERS => '0');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>240 and column<250)) THEN --b  verde
				red  <=(OTHERS => '0');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '0');
			elsif ((row > 250 and row <280) and (column>240 and column<250)) THEN --c  rojo
				red  <=(OTHERS => '1');
				green<=(OTHERS => '0');
				blue <=(OTHERS => '0');
			elsif ((row > 280 and row <290) and (column>210 and column<240)) THEN --d  blanco
				red  <=(OTHERS => '1');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>200 and column<210)) THEN --e cian
				red  <=(OTHERS => '0');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '1');
			elsif ((row > 210 and row <240) and (column>200 and column<210)) THEN --f  amarillo
				red  <=(OTHERS => '1');
				green<=(OTHERS => '1');
				blue <=(OTHERS => '0');
			else												--fondo
				red <= (OTHERS => '0');
				green <= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;		
	when others =>
		if ((row > 200 and row <210) and (column>110 and column<140)) THEN --a  azul
				red <= (OTHERS => '0');
				green<=(OTHERS => '1');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>140 and column<150)) THEN --b  verde
				red<= (OTHERS => '0');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '1');
			elsif ((row > 250 and row <280) and (column>140 and column<150)) THEN --c  rojo
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue<=(OTHERS => '0');
			elsif ((row > 210 and row <240) and (column>100 and column<110)) THEN --f  amarillo
				red <= (OTHERS => '1');
				green<=(OTHERS => '1');
				blue  <= (OTHERS => '0');
			elsif ((row > 240 and row <250) and (column>110 and column<140)) THEN --g   violeta
				red <= (OTHERS => '1');
				green<=(OTHERS => '0');
				blue  <= (OTHERS => '1');
			else    --fondo
				red <= (OTHERS => '0');
				green<= (OTHERS => '0');
				blue <= (OTHERS => '0');
			end if;
		end case;				
	end process generador_imagen;
		
	display_enable: process(reloj_pixel)
	begin
		if rising_edge(reloj_pixel) then
			if(h_count < h_pixels and v_count < v_pixels) then
				display_ena <= '1';
			else
				display_ena <= '0';
			end if;
		end if;
	end process display_enable;
	
	with contador select conectornum <=
		"0111111" when 0,
		"0000110" when 1,
		"1011011" when 2,
		"1001111" when 3,
		"1100110" when 4,
		"1101101" when 5,
		"1111101" when 6,
		"0000111" when 7,
		"1111111" when 8,
		"1110011" when 9,
		"0110101" when 10,
		"0100101" when 11,
		"0000101" when 12,
		"0001101" when 13,
		"0111101" when 14,
		"0010001" when 15,
		"0010101" when 16,
		"0101001" when 17,
		"0110100" when 18,
		"0111100" when 19,
		"0111110" when 20,
		"0000000" when others;
		
end architecture behavioral;